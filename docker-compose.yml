version: '2.3'
services:

###################################            KAFKA
  zookeeper:
    image: 'confluentinc/cp-zookeeper:latest'
    logging:
      driver: none
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000

  kafka:
    image: 'confluentinc/cp-kafka:latest'
    logging:
      driver: none
    depends_on:
      - zookeeper
    ports:
      - '9092:9092'
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_ADVERTISED_LISTENERS: 'PLAINTEXT://kafka:39092,PLAINTEXT_HOST://localhost:9092'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: 'PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT'
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1

# schema-registry:
#   image: 'confluentinc/cp-schema-registry:latest'
#   depends_on:
#     - zookeeper
#     - kafka
#   ports:
#     - '9081:8081'
#   environment:
#     SCHEMA_REGISTRY_KAFKASTORE_CONNECTION_URL: 'zookeeper:2181'
#     SCHEMA_REGISTRY_HOST_NAME: schema-registry
#     SCHEMA_REGISTRY_LISTENERS: 'http://schema-registry:8081'

# kafka-rest:
#   image: 'confluentinc/cp-kafka-rest:latest'
#   depends_on:
#     - zookeeper
#     - kafka
#     - schema-registry
#   ports:
#     - '8083:8083'
#   environment:
#     KAFKA_REST_ZOOKEEPER_CONNECT: 'zookeeper:2181'
#     KAFKA_REST_LISTENERS: 'http://kafka-rest:8083'
#     KAFKA_REST_SCHEMA_REGISTRY_URL: 'http://schema-registry:8081'
#     KAFKA_REST_HOST_NAME: kafka

# kafka-topics:
#   image: 'landoop/kafka-topics-ui:latest'
#   depends_on:
#     - zookeeper
#     - kafka
#     - kafka-rest
#     - schema-registry
#   ports:
#     - '8001:8000'
#   environment:
#     KAFKA_REST_PROXY_URL: 'kafka-rest:8083'
#     PROXY: 'true'


###########################################       KSQL
# ksql-server:
#   image: "confluentinc/cp-ksql-server:latest"
#   depends_on:
#     - kafka
#     - schema-registry
#     - zookeeper
#   ports:
#     - '8088:8088'
#   environment:
#     KSQL_BOOTSTRAP_SERVERS: kafka:39092
#     KSQL_LISTENERS: http://ksql-server:8088
#     KSQL_KSQL_SCHEMA_REGISTRY_URL: http://schema-registry:8081
#     KSQL_PRODUCER_INTERCEPTOR_CLASSES: "io.confluent.monitoring.clients.interceptor.MonitoringProducerInterceptor"
#     KSQL_CONSUMER_INTERCEPTOR_CLASSES: "io.confluent.monitoring.clients.interceptor.MonitoringConsumerInterceptor"

# ksql-cli:
#   image: confluentinc/cp-ksql-cli:5.3.0
#   depends_on:
#     - kafka
#     - ksql-server
#   entrypoint: /bin/sh
#   tty: true

# control-center:
#   image: confluentinc/cp-enterprise-control-center:5.3.0
#   hostname: control-center
#   depends_on:
#     - zookeeper
#     - kafka
#     - schema-registry
#     - ksql-server
#   ports:
#     - "9021:9021"
#   environment:
#     CONTROL_CENTER_BOOTSTRAP_SERVERS: 'kafka:39092'
#     CONTROL_CENTER_ZOOKEEPER_CONNECT: 'zookeeper:2181'
#     CONTROL_CENTER_KSQL_URL: "http://ksql-server:8088"
#     CONTROL_CENTER_KSQL_ADVERTISED_URL: "http://localhost:8088"
#     CONTROL_CENTER_SCHEMA_REGISTRY_URL: "http://schema-registry:8081"
#     CONTROL_CENTER_REPLICATION_FACTOR: 1
#     CONTROL_CENTER_INTERNAL_TOPICS_PARTITIONS: 1
#     CONTROL_CENTER_MONITORING_INTERCEPTOR_TOPIC_PARTITIONS: 1
#     CONFLUENT_METRICS_TOPIC_REPLICATION: 1
#     PORT: 9021


#############################             ORACLE
# oracle:
#   image: store/oracle/database-enterprise:12.2.0.1
#   ports:
#   - "1521:1521"
#   - "5500:5500"




#################################           POSTGRES
# postgres:
#   image: 'postgres:latest'
#   ports:
#     - '5432:5432'
#   environment:
#     POSTGRES_DB: postgres
#     POSTGRES_USER: postgres
#     POSTGRES_PASSWORD: postgres

# pgadmin4:
#   image: 'dpage/pgadmin4:latest'
#   ports:
#     - '8010:80'
#   environment:
#     - PGADMIN_DEFAULT_EMAIL=bob@gmail.com
#     - PGADMIN_DEFAULT_PASSWORD=postgres


##################################         COCKROACH
#  cockroach:
#    image: cockroachdb/cockroach:latest
#    command: start --insecure
#    ports:
#      - 26257:26257
#      - 10000:8080


#################################            ARANGO
  arangodb:
    image: arangodb:latest
    ports:
      - "8529:8529"
    environment:
      - ARANGO_NO_AUTH=1


################################           MONGO
# mongo:
#   image: mongo:latest
#   ports:
#     - '27017:27017'
#   environment:
#     - MONGO_INITDB_ROOT_USERNAME=mongo
#     - MONGO_INITDB_ROOT_PASSWORD=mongo
#     - MONGO_INITDB_DATABASE=public

##################################         REDIS
# redis:
#   image: redis
#   ports:
#     - '6379:6379'
#   command: >
#     --requirepass test 

# redis-commander:
#   hostname: redis-commander
#   image: rediscommander/redis-commander:latest
#   restart: always
#   ports:
#     - "9200:8081"
#   environment:
#     - REDIS_HOSTS=local:redis:6379:0:test


###################################      ClickHouse

# clickhouse_server:
#   image: yandex/clickhouse-server
#   ports:
#     - "8123:8123"
#     - "9000:9000"
#     - "9009:9009"
#   volumes:
#     - ./config.xml:/etc/clickhouse-server/config.xml
#
#
# clickhouse_client:
#   image: yandex/clickhouse-client
#   depends_on:
#     - clickhouse_server
#   command: ['--host', 'clickhouse_server']


# clickhouse_jdbc_bridge:
#   image: riftbit/clickhouse-jdbc-bridge-service
#   depends_on:
#     - clickhouse_server
#   ports:
#     - "9019:9019"
#   volumes:
#     - ./datasources.properties:/etc/clickhouse-jdbc-bridge/datasources.properties


##################################         REDASH
# redash_createdb:
#   image: redash/redash
#   depends_on:
#     - redis
#     - postgres
#   command: create_db
#   environment:
#     PYTHONUNBUFFERED: 0
#     REDASH_REDIS_URL: "redis://redis:6379/0"
#     REDASH_DATABASE_URL: "postgres://postgres:postgres@postgres/postgres"
#     REDASH_LOG_LEVEL: "INFO"
#     REDASH_RATELIMIT_ENABLED: "false"

# redash_server:
#   image: redash/redash
#   logging:
#     driver: none
#   ports:
#     - "5000:5000"
#     - "5678:5678"
#   depends_on:
#     - redis
#     - postgres
#     - redash_createdb
#   command: dev_server
#   environment:
#     PYTHONUNBUFFERED: 0
#     REDASH_REDIS_URL: "redis://redis:6379/0"
#     REDASH_DATABASE_URL: "postgres://postgres:postgres@postgres/postgres"
#     REDASH_LOG_LEVEL: "INFO"
#     REDASH_RATELIMIT_ENABLED: "false"


# redash_scheduler:
#   image: redash/redash
#   logging:
#     driver: none
#   depends_on:
#     - redis
#     - postgres
#     - redash_createdb
#   command: dev_scheduler
#   environment:
#     REDASH_REDIS_URL: "redis://redis:6379/0"
#     REDASH_RATELIMIT_ENABLED: "false"


# redash_worker:
#   image: redash/redash
#   logging:
#     driver: none
#   depends_on:
#     - redis
#     - postgres
#     - redash_createdb
#   command: dev_worker
#   environment:
#     PYTHONUNBUFFERED: 0
#     REDASH_REDIS_URL: "redis://redis:6379/0"
#     REDASH_DATABASE_URL: "postgres://postgres:postgres@postgres/postgres"
#     REDASH_LOG_LEVEL: "INFO"


##################################         INFINISPAN
# INFO - https://github.com/infinispan/infinispan-images

# infinispan:
#   image: infinispan/server
#   ports:
#     - '11222:11222'
#   environment:
#     - USER=test
#     - PASS=test


##################################         ELASTIC SEARCH
#  elastic:
#    logging:
#      driver: none
#    image: elasticsearch:latest
#    ports:
#      - 9200:9200
#      - 9300:9300
#    environment:
#      discovery.type: single-node


################################          SONARQUBE
# sonarqube:
#   image: sonarqube
#   ports:
#     - "9000:9000"


##############################             JAEGER
  jaeger:
    image: jaegertracing/all-in-one:latest
    logging:
      driver: none
    ports:
      - "6831:6831/udp"
      - "16686:16686"


##############################             LiquiBase
# liquibase_db:
#   logging:
#     driver: none
#   image: postgres
#   restart: always
#   ports:
#     - "32770:5432"
#    depends_on:
#      - postgres
#   environment:
#     postgres_db: postgres
#     postgres_user: postgres
#     postgres_password: postgres


##############################             APACHE ATLAS
#  atlas-server:
#    image: wbaa/rokku-dev-apache-atlas
#    ports:
#      - 21000:21000
#    depends_on:
#      - zookeeper
#      - kafka


##############################             CASSANDRA
  cassandra:
    image: cassandra:latest
    ports:
      - 9160:9160 # Thrift client API
      - 9042:9042 # CQL native transport port
      - 7199:7199 # JMX
      - 7001:7001 # TLS Internode communication
      - 7000:7000 # Internode communication
    environment:
      CASSANDRA_START_RPC: 'true'

##############################             JANUS GRAPH
  janusgraph:
    image: janusgraph/janusgraph:latest
    volumes:
      - ./conf:/opt/janusgraph/conf
#      - ./conf:/etc/opt/janusgraph
    ports:
      - 8182:8182
    depends_on:
      - elasticsearch
      - cassandra
    entrypoint:
      - /bin/bash
      - ./bin/gremlin-server.sh
      - /opt/janusgraph/conf/gremlin-server/gremlin-server-configuration.yaml
#    command: ["./bin/gremlin-server.sh", "/etc/opt/janusgraph/gremlin-server.yaml"]


##############################             PACT BROKER
# pact-broker:
#   image: 'dius/pact-broker:latest'
#   links:
#     - postgres
#   depends_on:
#     - postgres
#   ports:
#     - '10001:80'
#   environment:
#     PACT_BROKER_BASIC_AUTH_USERNAME: 'devsun'
#     PACT_BROKER_BASIC_AUTH_PASSWORD: '2bnF20Aj'
#     PACT_BROKER_BASIC_AUTH_READ_ONLY_USERNAME: 'true'
#     PACT_BROKER_BASIC_AUTH_READ_ONLY_PASSWORD: 'true'
#     PACT_BROKER_DATABASE_HOST: db
#     PACT_BROKER_DATABASE_NAME: postgres
#     PACT_BROKER_DATABASE_USERNAME: postgres
#     PACT_BROKER_DATABASE_PASSWORD: postgres
#     check_for_potential_duplicate_pacticipant_names: 'false'


##############################           Apache Nifi
# nifi:
#   image: apache/nifi
#   logging:
#     driver: none
#   ports:
#     - '9090:8080'


